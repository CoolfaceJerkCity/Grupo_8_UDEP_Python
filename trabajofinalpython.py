# -*- coding: utf-8 -*-
"""TrabajoFinalPython.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xmnkhz8twT6GFeMt6Rc1wwQKfWZMotVY
"""

#Dependencias del programa
"""
pip install seaborn
pip install matplotlib
pip install pandas
pip install numpy
pip install openpyxl
"""

import seaborn as sns #Seaborn
from matplotlib import pyplot as plt #Pyplot
from matplotlib.pylab import subplots #Subplots

import pandas as pd
from pandas import DataFrame
import numpy as np #Numpy

separador = '=================================================='
separador2 = '=========================================================================='

def ingresar_datos():
  
  info = []
  pregunta = 's'
  while pregunta == 'S' or pregunta == 's':
    global database_df
    columnas = list(database_df.columns.values)
    
    for i in range(0,len(columnas)):
      
      valido = True
      
      while valido == True:
        print('Dato a agregar:', columnas[i])
        tipo_dato = input('Ingrese 1 si el dato es un número y 2 si es una cadena de texto: ')
        if tipo_dato == '1':
          info.append(float(input('Ingrese el valor: ')))
          print(separador2)
          valido = False
      
        elif tipo_dato == '2':
          info.append(input('Ingrese la cadena de texto: '))
          print(separador2)
          valido = False

        else:
          print(separador2)
          print('********Ingrese un valor válido')
          valido == True

    dic_info = dict(zip(columnas,info))
    database_df = database_df.append(dic_info, ignore_index=True)
    print(database_df)
    pregunta = input('S para agregar otro elemento u otra tecla para salir: ')
    info = []

    if pregunta == 'S' or pregunta == 's':
      continue
    else:
      break

################################################################################

def filtrarDataFrame(database_df):
  columnas_df = list(database_df.columns.values) #Retorna una lista con las columnas
  print("Estos son las columnas que puede ingresar para el filtrado: ", list(columnas_df))
  print(separador)

  columna = input("Ingrese la columna escogida: ")
  if columna in columnas_df:
    print(separador)
    pregunta = input("¿El parametro es una cadena de texto o un numero? (texto/numero): ")
    print(separador)
    if pregunta == 'texto':
      parametro = input("Ingrese el parametro de busqueda: ")

    elif pregunta == 'numero':
      parametro = int(input("Ingrese el parametro de busqueda: "))

    else:
      return False

    datos = database_df.loc[database_df[columna]==parametro]

    print(separador)

    if len(datos)>0:
      return print(datos)

    else:
      return print(f"{columna.upper()} no encontrad@ con el parametro '{parametro}'")
  
  else:
    print(separador)
    print("Columna no encontrada, REINICIANDO... =)")
    print(separador)
    filtrarDataFrame(database_df)
  
  

################################################################################
"""
-> Validaciones de entrada de datos...
"""
#Funcion para filtrar contenido de una colección
def chooseCollection(input, collection):
  if input in collection:
    print(f"Escogiste la opcion {input}")
    print(separador)
    return True

  else:
    print("Dato no válido")
    print(separador)
    return False  

#Funcion para verificar columna opcional o no
def isItstDataType(texto, opcional = False, isNumber = False, min = None, max = None):
  while True:
    value = input(texto)

    if len(value) == 0 and opcional == True:
      print("Al no ingresar valor, se tomo como valor por defecto: None")
      print(separador)
      value = None
      return value
    
    elif isNumber == True:
      try:
        if (min <= float(value) <= max):
          print(separador)
          return float(value)

        else:
          print("Ingrese un valor dentro del rango...")

      except:
        print("Ingrese un valor de tipo entero/flotante...")

    elif chooseCollection(value, database_df):
      return value

    else:
      continue

"""
-> Funciones para distintos tipos de gráficos...
"""
# chartTypeA() => dispersion / columna(s) / size / color / alpha (Competado)
# chartTypeB() => histograma / -> columna / kde / bins / hue / alpha (Completado)
# chartTypeC() => densidad / -> columna / paleta (Completado)

def chartTypeA(ejeX):
  ejeY = isItstDataType("Ingrese la columna para el ejeY: ")
  hue_ = isItstDataType("Ingrese la columna para comparar: (Opcional) ", True)
  alph = isItstDataType("Ingrese la opacidad del gráfico (min: 0.10, max: 1.00) (Opcional):  ", True, True, 0.10, 1.00 )

  sns.relplot(x=ejeX, y=ejeY, hue = hue_, alpha = alph, data = database_df)
  plt.show()

def chartTypeB(ejeX):
  hue_ = isItstDataType("Ingrese la columna para comparar: (Opcional) ", True)
  alph = isItstDataType("Ingrese la opacidad del gráfico (min: 0.10, max: 1.00) (Opcional):  ", True, True, 0.10, 1.00 )
  bin = isItstDataType("Ingrese la cantidad de bins del gráfico (min: 1, max: 200):  ", False, True, 1, 200 )

  sns.displot(database_df, x=ejeX, hue=hue_, alpha=alph, bins=int(bin))
  plt.show()

def chartTypeC(ejeX):
  ejeY = isItstDataType("Ingrese la columna para el ejeY (Opcional): ", True)
  sns.kdeplot(data = database_df, x = ejeX, y = ejeY)
  plt.show()

"""
-> Función para elegir el tipo de gráfico...
"""

def chooseChart():
  print(f"\na) Gráfico de dispersion \nb) Gráfico de distribución (Histograma)\nc) Gráfico de densidad\n{separador}")
  while True:
    tipo = input("Escoja la opción que desee: ").lower()
    if chooseCollection(tipo, ['a','b','c']):
      ejeX = isItstDataType("Ingrese la columna para el ejeX: ")
      eval(f"chartType{tipo.upper()}('{ejeX}')")
      break

################################################################################

def datos_estadisticos():
  variable = []

  while True:
    columna = input('Ingrese el nombre de la columna a analizar ')
    if chooseCollection(columna, database_df):
      variable.append(columna)

      pregunta = input('Escriba S si desea agregar otra columna u otra tecla para terminar el programa ')

      if pregunta == 'S' or pregunta == 's':
        continue

      else:
        break

  print(database_df[variable].describe())

################################################################################

def Agregar_columna():
  decision = input('Si desea agregar otra columna ingrese S, de lo contrario cualquier otra letra: ')
  while decision == 'S' or decision == 's': 
    nombre = input('Ingresa el nombre de la columna: ')

    if nombre in database_df or len(nombre) == 0:
      print('Columna no válida o nula...')
      continue

    datos_columna = []
    Num_datos = database_df.shape[0]
    #216489nprint(Num_datos)

    j = int(Num_datos)
    for i in range(0,j):
      datos = input('Ingrese los datos del índice {}: '.format(i))
      datos_columna.append(datos)
    database_df[nombre] = datos_columna
    decision = input('Si desea agregar otra columna ingrese S, de lo contrario cualquier otra letra: ')
  
  print("------------------------------------------------------------------------------------------------------")
  print('')
  print('No se agregaron más columnas')
  print('')
  print(database_df.head(10))

################################################################################

def main():
  ruta = input('Ingrese la ruta del archivo excel ')
  global database_df
  database_df = pd.read_excel(ruta)
  decision2 = 's'

  while decision2 == 'S' or decision2 == 's':
    print(separador2)
    print('Panel de opciones:')
    print('1) Ingresar datos')
    print('2) Filtrar datos')
    print('3) Gráficos de análisis')
    print('4) Datos estadísticos')
    print('5) Generar nuevas columnas')
    print('* Otra tecla para salir')
    print(separador2)
    opcion_panel = input('')
    if opcion_panel == '1':
      ingresar_datos()
      continue
    elif opcion_panel == '2': 
      filtrarDataFrame(database_df)
      continue
    elif opcion_panel == '3':
      chooseChart()
      continue
    elif opcion_panel == '4':
      datos_estadisticos()
      continue
    elif opcion_panel == '5':
      Agregar_columna()
      continue
    else:
      break
     
    decision2 = input('Escriba S si desea seguir en el programa, caso contrario escriba cualquier letra para guardar los datos en un archivo de excel')
  database_df.to_excel(ruta, index=False)   

main()